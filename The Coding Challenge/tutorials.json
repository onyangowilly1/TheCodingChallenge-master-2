{"tutorials":
    [{"name": "Hello World",
     "introText": "For this first tutorial we will make a small program that all programmers knows very well, and that is to say \"Hello World!\"",
     "iconName": "helloWorld.png",
     "endTutorialText": "Congratulations!\r\rYou've just made your first app!\r\rLet's try some more :-)",
     "challenges":
     [{"text": "We must first make a class, which we have named HalloWorld. Then we create a string variable HelloWorld and give it a value.\r Then we print out the value to test if it works.",
      "code": "class HelloWorld {\r   var userText: String = Enter Code \r   print(text)\r}",
      "input1": "\"Hello World\"",
      "input2": "Good Day!",
      "input3": "@How are you@",
      "correctInput": 1,
      "imageToDisplay": "noImageToDisplay",
      "correctAnswerText": ""},
      {"text": "Nothing showed right? It's because we have not created an outlet for the text to be displyed yet\r\r We do this by creating an @IBOutlet (outlet) whose type is UILabel. \r Afterwards we set the text of this label to be equal to the variable we made earlier (userText).",
      "code": "@IBOutlet var textLabel: UILabel {\r   textLabel.Enter Code = userText \r}",
      "input1": "helloWorld",
      "input2": "written",
      "input3": "text",
      "correctInput": 3,
      "imageToDisplay": "noImageToDisplay",
      "correctAnswerText": "Hello World!\r\r\rGood work! Maybe it doesn't do much yet, but this is how all programmers start learning how to code!\r\r"}]
     },
     {"name": "Display a picture",
     "introText": " For this tutorial we will learn how to display an image with code.\r\r The logo you saw on the main menu and the background you see here are both images. It is also possible to add images to buttons, such as the tutorial button you pressed to come here.\r\r Images can either be added to the app project directly, but can also be downloaded from web.\r\r Let's start to see how we do this.",
     "iconName": "displayAPicture.png",
     "endTutorialText": "Congratulations!\r\r You have just completed some code to display an image\r\r Let's try some more",
     "challenges":
     [{"text": "First we need to create an object that will hold the image we want to display. We do this by creating a variable and assigning it with an image type, which is UIImage.\r\r Below, choose which type the object should have.",
      "code": "var newImage: Enter Code",
      "input1": "image",
      "input2": "UIImageView",
      "input3": "UIImage",
      "correctInput": 3,
      "imageToDisplay": "noImageToDisplay",
      "correctAnswerText": "You've just created an image object.\r\r The \": UIImage\" tells the computer that this object is supposed to be an image."},
      {"text": " We have created an object called image. Now we need to create an outlet for this image to be viewed on the screen. We do this by using the keyword @IBOutlet and assign it a name and a type.\r\r There are many different outlets avaliable to display content. Which type do you think would be best to display an image?",
      "code": "@IBOutlet var imageView: Enter Code",
      "input1": "UIImageView",
      "input2": "UILabel",
      "input3": "UIButton",
      "correctInput": 1,
      "imageToDisplay": "noImageToDisplay",
      "correctAnswerText": "That's correct! UIImageView will provide us with a place for us to display our image.\r\r It is also possible to add images to buttons, but that is not what we are looking for right now."},
      {"text": " We now have to connect the imageView to the newImage object we created before.\r\r There are many different things we can do with an imageView, such as change the description and if we want it animated. Therefore it is not good enough to just say imageView = newImage. We must tell the imageView that we want to change the image and then assign our newImage to that.\r\r Which function do you think we need to change in the imageView?",
      "code": "imageView.Enter Code = newImage",
      "input1": "backgroundColor",
      "input2": "description",
      "input3": "image",
      "correctInput": 3,
      "imageToDisplay": "noImageToDisplay",
      "correctAnswerText": "Great! As you can see there is nothing displayed yet. This is because we must tell the outlet which image object to display. Which object should we tell the imageView to display?"},
      {"text": " Now that we have an image object and an outlet to display the image it is time to choose which picture to show.\r\r We have already uploaded a few images to the app, so choose which one you would like to display below.",
      "code": "var image = UIImage(named: Enter Code)",
      "input1": "northernLights.jpg",
      "input2": "catAndRabbit.jpg",
      "input3": "amsterdam.jpg",
      "correctInput": 0,
      "imageToDisplay": "fromOptions",
      "correctAnswerText": "Congrats! You just displayed an image! Like it?"},
      {"text": " Let's try to change the image and see what happens. So choose a different image than you first choose.",
      "code": "var image = UIImage(named: Enter Code)",
      "input1": "northernLights.jpg",
      "input2": "catAndRabbit.jpg",
      "input3": "amsterdam.jpg",
      "correctInput": 0,
      "imageToDisplay": "fromOptions",
      "correctAnswerText": "Great! As you see it is easy to change which pictures to show.\r\r Let't try to take a picture with our camera and display that instead!"},
      {"text": " To take a picture with our camera we need to first initialize (create) an ImagePickerController object. The ImagePickerController object manages taking photos and video with your phone.\r It also manages photos and videos you ahev in your Photo Library.\r\r Which code do we need in order to create an object of imagePicker?",
      "code": "var imagePicker Enter Code",
      "input1": "= UIImagePickerController()",
      "input2": ": UIImagePickerController",
      "input3": "= UIImage",
      "correctInput": 1,
      "imageToDisplay": "noImageToDisplay",
      "correctAnswerText": "Correct! By declaring the object with \"= UIImagePickerController()\" instead of \": UIImagePickerController\" we initialize an object, instead of just setting the type and then waiting for it to get a value."},
      {"text": " The UIImagePickerController allows you to either take a photo or use one from the Photo Library. We want to take a photo with the camera, so we have to specify this.\r\r Which code below do you think we need to add?",
      "code": "imagePicker.Enter Code = .Camera",
      "input1": "allowsEditing",
      "input2": "SourceType",
      "input3": "Camera",
      "correctInput": 2,
      "imageToDisplay": "noImageToDisplay",
      "correctAnswerText": ".SourceType = .Camera is the correct answer. You decide here which source you want to get the image from. If you would have like to use the Photo Library then you could have used .PhotoLibrary"},
      {"text": "After we have choosen which SourceType we want to get the picture from we need to also tell the program to display the camera. We do this by using presentViewController(). This will display a new view/screen.\r\r We need to tell the function which view/screen to display. Which of the options do we need to give to the function in order to display the camera?",
      "code": "presentViewController(Enter Code, animated: true, completion: nil)",
      "input1": "photoLibrary",
      "input2": "imagePicker",
      "input3": "camera",
      "correctInput": 2,
      "imageToDisplay": "fromTakenPhoto",
      "codeToExecute": "takeAPhoto",
      "correctAnswerText": "Great! You took a photo and you displayed it!\r\rNot that difficult right?\r\rNow let't try to choose a photo from your PhotoLibrary"},
      {"text": "What source type should we pick if we want to choose a photo from our PhotoLibrary?",
      "code": "imagePicker.SourceType = Enter Code",
      "input1": ".Camera",
      "input2": ".PhotoLibrary",
      "input3": ".AllImages",
      "correctInput": 2,
      "imageToDisplay": "fromTakenPhoto",
      "codeToExecute": "chooseAPhoto",
      "correctAnswerText": "You can see that with some simple adjustsments you can easily display photos from several sources. "}]
     },
     {"name": "Play an animation",
     "introText": "For this first tutorial we will make a small program that all programmers knows very well, and that is to say \"Hello World!\"",
     "iconName": "playAnAnimation.png",
     "endTutorialText": "Congratulations!\r\rYou've just made your first app!\r\rLet's try some more :-)",
     "challenges":
     [{"text": "We must first make a class, which we have named HalloWorld. Then we create a string variable HelloWorld and give it a value.\r Then we print out the value to test if it works.",
      "code": "class HelloWorld {\r   var userText: String = Enter Code \r   print(text)\r}",
      "input1": "\"Hello World\"",
      "input2": "Good Day!",
      "input3": "@How are you@",
      "correctInput": 1,
      "imageToDisplay": "noImageToDisplay",
      "correctAnswerText": ""},
      {"text": "Nothing showed right? It's because we have not created an outlet for the text to be displyed yet\r\r We do this by creating an @IBOutlet (outlet) whose type is UILabel. \r Afterwards we set the text of this label to be equal to the variable we made earlier (userText).",
      "code": "@IBOutlet var textLabel: UILabel {\r   textLabel.Enter Code = userText \r}",
      "input1": "helloWorld",
      "input2": "written",
      "input3": "text",
      "correctInput": 3,
      "imageToDisplay": "noImageToDisplay",
      "correctAnswerText": "Hello World!\r\r\rGood work! Maybe it doesn't do much yet, but this is how all programmers start learning how to code!\r\r"}]
     },
     {"name": "Play a sound",
     "introText": "For this first tutorial we will make a small program that all programmers knows very well, and that is to say \"Hello World!\"",
     "iconName": "playASound.png",
     "endTutorialText": "Congratulations!\r\rYou've just made your first app!\r\rLet's try some more :-)",
     "challenges":
     [{"text": "We must first make a class, which we have named HalloWorld. Then we create a string variable HelloWorld and give it a value.\r Then we print out the value to test if it works.",
      "code": "class HelloWorld {\r   var userText: String = Enter Code \r   print(text)\r}",
      "input1": "\"Hello World\"",
      "input2": "Good Day!",
      "input3": "@How are you@",
      "correctInput": 1,
      "imageToDisplay": "noImageToDisplay",
      "correctAnswerText": ""},
      {"text": "Nothing showed right? It's because we have not created an outlet for the text to be displyed yet\r\r We do this by creating an @IBOutlet (outlet) whose type is UILabel. \r Afterwards we set the text of this label to be equal to the variable we made earlier (userText).",
      "code": "@IBOutlet var textLabel: UILabel {\r   textLabel.Enter Code = userText \r}",
      "input1": "helloWorld",
      "input2": "written",
      "input3": "text",
      "correctInput": 3,
      "imageToDisplay": "noImageToDisplay",
      "correctAnswerText": "Hello World!\r\r\rGood work! Maybe it doesn't do much yet, but this is how all programmers start learning how to code!\r\r"}]
     }]
}